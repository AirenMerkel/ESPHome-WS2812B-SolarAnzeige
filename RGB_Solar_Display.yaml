substitutions:
  device_name: "RGB_Solar_Anzeige"

  
esphome:
  name: solar_anzeige
  friendly_name: RGB Solar Anzeige

esp8266:
  board: d1_mini_lite

# Enable logging
logger:
  level: DEBUG
# Enable Home Assistant API
api:
  encryption:
    key: "abcxyz"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:


sensor:
  - platform: homeassistant
    id: networkreference_power_ksem
    entity_id: sensor.networkreference_power_ksem
#       - switch.turn_on: ${device_name}_on
        
  - platform: homeassistant
    id: gridfeed_power_ksem
    entity_id: sensor.gridfeed_power_ksem
#        - switch.turn_on: ${device_name}_on

  - platform: homeassistant
    id: scb_8_5w_battery_soc
    entity_id: sensor.scb_8_5w_battery_soc

  - platform: homeassistant
    id: scb_8_5w_battery_power
    entity_id: sensor.scb_8_5w_battery_power
#    on_value:
#      then:
#        - switch.turn_on: ${device_name}_on

     

light:
  - platform: neopixelbus
    variant: WS2811
    pin: D1  #  SD Pin
    num_leds: 176
    name: "RGB Solar Anzeige"
    effects:
      - addressable_lambda:
          name: "My Custom Effect"
          update_interval: 5s

          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();
            bool ledSegments [13][8]{
            // 1,2,3,4,5,6,7,8
              {1,1,1,0,1,1,1,0}, // digit 0 // 000$0001 DEC 1
              {0,0,1,0,0,1,0,0}, // digit 1 // 100$1111 DEC 79
              {1,0,1,1,1,0,1,0}, // digit 2 // 001$0010 DEC 18
              {1,0,1,1,0,1,1,0}, // digit 3 // 000$0110 DEC 6
              {0,1,1,1,0,1,0,0}, // digit 4 // 100$1100 DEC 76
              {1,1,0,1,0,1,1,0}, // digit 5 // 010$0100 DEC 36
              {1,1,0,1,1,1,1,0}, // digit 6 // 010$0000 DEC 32
              {1,0,1,0,0,1,0,0}, // digit 7 // 000$1111 DEC 15
              {1,1,1,1,1,1,1,0}, // digit 8 // 000$0000 DEC 0
              {1,1,1,1,0,1,1,0}, // digit 9 // 000$0100 DEC 4
              {0,0,0,0,0,0,0,0}, // digit off
              {0,0,0,1,0,0,0,0}, // digit minus
              {0,0,1,1,0,1,0,0}  // digit minus eins
            };  

            //AC 8,5 Nord; AC8,5 KW; AKKU Watt; Akku%; IN/OUT;
            int ranges[5] = {4,5,5,3,6};

            int power[6] = {10,10,10,10,10,10};
            bool powtogrid = false;
            int batery[3] = {10,10,10};
            int bateryPower[5] = {10,10,10,10,10};
            bool powtobat = false;

            //////////////////////get Values///////////////////////////
            
            int powerVal = id(networkreference_power_ksem).state;
            int battery_load = id(scb_8_5w_battery_soc).state;
            int battery_power = id(scb_8_5w_battery_power).state;

            printf("\t\tIN/OUT: %i; battery_load: %i; battery_power: %i;\n", powerVal < 0 ? -1 * (int) id(gridfeed_power_ksem).state : powerVal, battery_load, battery_power);

            ////////////////////////pow Val///////////////////////////
            if(powerVal <= 0){
              powerVal = id(gridfeed_power_ksem).state;
              powtogrid = true;
            }

            for(int i=0; i < 6; i++){
              if (powerVal == 0 && i > 0) {
                if(powtogrid){
                  power[i] = 11;
                } else{
                  power[i] = 10;
                }
                break;
              }
              if(powerVal > 0){
                power[i] = (int) powerVal % 10;
                powerVal = powerVal / 10;
              } 
            }
            ////////////////////////batery load///////////////////////////
            for(int i = 0; i < 3; i++){
              if (battery_load > 0) {
                batery[i] = (int) battery_load % 10;
                battery_load = battery_load / 10;
              }
            }
            ////////////////////////bat Power///////////////////////////
            if(battery_power < 0){
              battery_power = -battery_power;
              powtobat = true;
            }

            for(int i=0; i < 5; i++){
              if (battery_power == 0 ) {
                if(powtobat){
                  bateryPower[i] = 11;
                } else{
                  bateryPower[i] = 10;
                }
                break;
              }
              if (battery_power > 0) {
                bateryPower[i] = (int) battery_power % 10;
                battery_power = battery_power / 10;
              }
            }







            ///////////////////////display Power///////////////////////////
            
            bool displayPower[8*6];

            for(int i=0; i < 6; i++){
              //printf("\npower %d\n\t\t", power[i]);
              for(int j = 0; j < 8; j++){
                displayPower[(i*8)+j] = ledSegments[power[i]][7-j];
                //printf("%d", ledSegments[power[i]][7-j]);

              }
            }
            
            bool displayBatLoad[8*3];
            
            for(int i=0; i < 3; i++){
              //printf("\nbatery %d\n\t\t", batery[i]);
              for(int j = 0; j < 8; j++){
                displayBatLoad[(i*8)+j] = ledSegments[batery[i]][7-j];
                //printf("%d", ledSegments[batery[i]][7-j]);
              }
            }

            bool displayBateryPower[8*5];

            for(int i=0; i < 5; i++){
              //printf("\nbatery power %d\n\t\t", bateryPower[i]);
              for(int j = 0; j < 8; j++){
                displayBateryPower[(i*8)+j] = ledSegments[bateryPower[i]][7-j];
                //printf("%d", ledSegments[bateryPower[i]][7-j]);
              }
            }






            ///////////////////////display All////////////////////////////

            for (int i = (it.size() - 1); i > 0; i--) {
              if(i > (it.size() - 1 - (ranges[4] * 8))){
                it[i] = displayPower[ (it.size() - 1)-i] ? Color(250, 0, 0) : Color::BLACK; 
                //printf("(%i; %i): [%i, %i, %i]\n", i,  (it.size() - 1)-i, it[i].get()[0], it[i].get()[1], it[i].get()[2]);
              }
              else if(i > (it.size() - 1 - ((ranges[3] + ranges[4]) * 8))){
                it[i] = displayBatLoad[ (it.size() - 1 - (ranges[4] * 8))-i] ? Color(0, 250, 0) : Color::BLACK; 
                //printf("(%i; %i): [%i, %i, %i]\n", i,  (it.size() - 1 - (ranges[4] * 8)) - i, it[i].get()[0], it[i].get()[1], it[i].get()[2]);
                //printf("(%i; %i)\n", i,  (it.size() - 1 - (ranges[4] * 8)) - i );
              }
              else if(i > (it.size() - 1 - ((ranges[2]+(ranges[3] + ranges[4])) * 8))){
                it[i] = displayBateryPower[ (it.size() - 1 - ((ranges[3] + ranges[4]) * 8))-i] ? Color(0, 0, 250) : Color::BLACK;
                //printf("(%i; %i): [%i, %i, %i]\n", i,  (it.size() - 1 - ((ranges[3] + ranges[4]) * 8))-i, it[i].get()[0], it[i].get()[1], it[i].get()[2]);
                //printf("(%i; %i)\n", i,  (it.size() - 1 - ((ranges[3] + ranges[4]) * 8))-i);
              }
            }

